{"name":"Gpub","tagline":"Tiny PubSub module.","body":"# Gpub\r\n\r\nTiny PubSub module.\r\n\r\n[![Build Status](https://secure.travis-ci.org/goliatone/gpub.png)](http://travis-ci.org/goliatone/gpub)\r\n\r\n## Getting Started\r\nDownload the [production version][min] or the [development version][max].\r\n\r\n[min]: https://raw.github.com/goliatone/gpub/master/dist/gpub.min.js\r\n[max]: https://raw.github.com/goliatone/gpub/master/dist/gpub.js\r\n\r\n\r\n## Documentation\r\n\r\nTo generate documentation, run:\r\n\r\n`jsdox --output docs src/`\r\n\r\n\r\nGpub: Simple pub/sub\r\n====================\r\n*(c) 2013 goliatone*\r\n\r\n**Author:** goliatone\r\n\r\n**Overview:** Gpub is an Event Dispatcher library. Or pub/sub.\r\n\r\nGpub.on(topic, callback, scope, options)\r\n----------------------------------------\r\nRegister an event listener.\r\nthe handler.\r\nevent to all handler callbacks.\r\n\r\n\r\n**Parameters**\r\n\r\n**topic**:  *String*,  String indicating the event type\r\n\r\n**callback**:  *Function*,  Callback to handle event topics.\r\n\r\n**scope**:  *Object*,  We can dynamically change the scope of\r\n\r\n**options**:  *Object*,  Options object that will be sent with the\r\n\r\nGpub.emits(topic)\r\n-----------------\r\nChecks to see if the provided topic has\r\nregistered listeners and thus triggering\r\nand event.\r\n\r\n\r\n**Parameters**\r\n\r\n**topic**:  *String*,  Event type.\r\n\r\nGpub.emit(topic, options)\r\n-------------------------\r\nTriggers an event so all registered listeners\r\nfor the `topic` will be notified.\r\nOptionally, we can send along an options object.\r\n\r\nin the event to all listeners\r\nregistered with `topic`.\r\n\r\n\r\n**Parameters**\r\n\r\n**topic**:  *String*,  Event type.\r\n\r\n**options**:  *Object*,  Options object, sent along\r\n\r\nGpub.off(topic, callback)\r\n-------------------------\r\nUnregisters the given `callback` from `topic`\r\nevents.\r\nIf called without arguments, it will remove all\r\nlisteners.\r\nTODO: If we pass `topic` but no `callback` should we\r\nremove all listeners of `topic`?\r\n\r\n\r\n\r\n**Parameters**\r\n\r\n**topic**:  *String*,  Event type.\r\n\r\n**callback**:  *Function*,  Listener we want to remove.\r\n\r\nGpub.callbacks(topic)\r\n---------------------\r\nReturns all registered listeners for\r\na given `topic`.\r\nIf called without `topic` will return all\r\ncallbacks.\r\n\r\nUsed internally.\r\n\r\n\r\n\r\n**Parameters**\r\n\r\n**topic**:  *String*,  Event type.\r\n\r\nGpub.observable(target)\r\n-----------------------\r\nObservable mixin. It will add `Gpub` methods\r\nto the given `target`.\r\nIf we provide a `constructor` it will extend\r\nit's prototype.\r\n\r\n```javascript\r\nvar Model = function(){};\r\nGpub.observable(Model);\r\nvar user = new Model();\r\nuser.on('something', function(){console.log('Hola!')});\r\nuser.emit('something');\r\n```\r\n\r\n\r\n\r\n**Parameters**\r\n\r\n**target**:  *Object|Function*,  \r\n\r\n\r\n**Returns**\r\n\r\n*Object|Function*,  Returns the given object.\r\n\r\nGpub.delegable(src, events, eventBuilder, glue)\r\n-----------------------------------------------\r\nIt will create methods in `src` to register\r\nhandlers for all passed events.\r\n\r\nIf we pass:\r\nvar Model = function(){};\r\nvar events = ['change', 'sync'];\r\nGpub.delegable(Model.prototype, events);\r\nvar user = new Model();\r\nuser.onsync(function(e){console.log('sync\\'d', e)});\r\nuser.onchange(function(e){console.log('changed', e)});\r\nuser.emit('change').emit('sync');\r\n\r\nBy default, methods generated will be in the form\r\nof **on**+**event**.\r\nWe can pass in a custom method name generator.\r\n\r\nIf the passed in `src` object is not an instance\r\nof `Gpub` it will be augmented with the mixin.\r\n\r\nwith methods.\r\ngenerate delegate methods.\r\nmethod name.\r\nwill be used to split into different\r\nevent types.\r\n\r\n\r\n**Parameters**\r\n\r\n**src**:  *Object*,  Object to extend\r\n\r\n**events**:  *Array|String*,  Events for which we want to\r\n\r\n**eventBuilder**:  *Function*,  Function to generate the delegate\r\n\r\n**glue**:  *String*,  If we pass in a string, this\r\n\r\n**Returns**\r\n\r\n*Object*,  Returns passed in object.\r\n\r\nGpub.bindable(src, set, get, bind)\r\n----------------------------------\r\nIt will monkey patch the given `src` setter\r\nmethod so that it triggers a `change` and `change:<key>`\r\nevent on update. The event object carries the old value\r\nand the current value, plus the updated property name.\r\n\r\nIt's a quick way to generate a bindable model.\r\n\r\n```javascript\r\nvar Model = function(){this.data={}};\r\nModel.prototype.set = function(key, value) {\r\n    this.data[key] = value;\r\n    return this;\r\n};\r\nModel.prototype.get = function(key, def){\r\n    return this.data[key] || def;\r\n};\r\nGpub.bindable(Model.prototype, 'set', 'get');\r\n```\r\nIf we don't specify a `set` or `get` value, then\r\n`set` and `get` will be used by default.\r\n\r\n\r\n\r\n**Parameters**\r\n\r\n**src**:  *Object*,  Object to be augmented.\r\n\r\n**set**:  *String*,  Name of `set` method in `src`\r\n\r\n**get**:  *String*,  Name of `get` method in `src`\r\n\r\n**bind**:  *Boolean*,  Should we bind the generated method?\r\n\r\n**Returns**\r\n\r\n*Object*,  Returns the passed in object.\r\n\r\n## Examples\r\nYou can check out the contents of the examples folder.\r\n\r\n## Release History\r\n\r\n* `v0.3.7`: Added \"topic\" and \"unregister\" function to event obj.\r\n* `v0.3.6`: Added method \"multi\".\r\n* `v0.3.0`: Added mixin.\r\n* `v0.2.0`: Update API.\r\n* `v0.1.0`: Initial release.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}